#!/usr/bin/env python

from __future__ import print_function
import subprocess
import re
import sys

# Output usage if argument is missing
try:
    IP = sys.argv[ 1 ]
except IndexError:
    print ( "\nNeeds IP address of the target server" )
    print ( """
Usage:
        check_roxie <ip-address>
""" )
    sys.exit ( 3 )

# Nagios exit codes
ok = 0
warning = 1
critical = 2

cmd_roxie_status = '2>/dev/null testsocket %s "<control:state/>"' % IP
status = subprocess.Popen ( cmd_roxie_status.strip ( ) , stdout=subprocess.PIPE , shell=True )
status_result = status.communicate ( )[ 0 ]
roxie_status = re.findall ( '\<Status\>(.+?)\</Status\>+?' , status_result )
my_hash = re.findall ( "hash='(.*?)'" , status_result )

# Check if roxie process is up and running
if roxie_status and roxie_status[ 0 ] == 'ok':
    # Get state hashes from roxie cluster
    hashes = [ ]
    try:
        cmd_cluster_state = '2>/dev/null testsocket %s -lock "<control:state/>"' % IP
        cluster_state = subprocess.Popen ( cmd_cluster_state.strip ( ) , stdout=subprocess.PIPE , shell=True )
        cluster_state_result = cluster_state.communicate ( )[ 0 ]
        for cluster_result in cluster_state_result.split( ):
            if "hash" in cluster_result:
                state_hash = re.findall ( "hash=\"(.*?)\"" , cluster_result )
                hashes.append ( state_hash[ 0 ] )
    except:
        pass

    myHashMatchWithOthers = False
    numOfSameHashes = 0
    numOfDifferentHashes = 0

    # Compare hash state between self and cluster
    for roxie_hash in hashes:
        if my_hash[ 0 ] == roxie_hash:
            myHashMatchWithOthers = True
            numOfSameHashes += 1
        elif my_hash[ 0 ] != roxie_hash:
            numOfDifferentHashes += 1

    if not myHashMatchWithOthers:
        print ( "Roxie process is running but there is a state mismatch " , my_hash[ 0 ].replace ( '\n' , '' ) )
        sys.exit ( warning )
    elif numOfSameHashes < numOfDifferentHashes and myHashMatchWithOthers:
        print ( "Roxie process is running but there is a state mismatch " , my_hash[ 0 ].replace ( '\n' , '' ) )
        sys.exit ( warning )
    elif numOfSameHashes > numOfDifferentHashes and myHashMatchWithOthers:
        print ( "Roxie process is running and state hash matches across roxie cluster" )
        sys.exit ( ok )
    else:
        print ( "Roxie process is running but roxie cluster appears to have state mismatch" )
        sys.exit ( warning )
else:
    print ( "Roxie process is down" )
    sys.exit ( critical )
